@startuml AlgoRoma

class AlgoRoma{
    -turnos: int
    -ganador: Jugador
    +AlgoRoma(tablero: Tablero)
    +agregarJugador(jugador: Jugador)
    +comenzarPartida(): Jugador
    +comenzarPartidaConElPrimerJugador(): Jugador
    +siguienteJugador(): Jugador
    +finalizarTurno()
    +entregarElementos(jugador: Jugador)
    +sumarUnTurno()
    +elGanador(): Jugador
    +finalizarJuego(jugador: Jugador)
}

class ListaCircular<T>{
    -inicio: Nodo<T>
    -actual: Nodo<T>
    -longitud: int
    +agregarElemento(elemento: T)
    +obtener(): T
    +seleccionAleatoria(): T
    +iniciarConElPrimero(): T
    +siguiente(): T
    +tamanio(): int
    +vueltaCompleta(): boolean
}

abstract class Jugador{
    #energia: Energia
    #posicion: Posicion
    #equipo: Equipo
    #dispositoDeAzar: dispositivoDeAzar
    #turno: Turno
    #nombre: String
    +afectarEnergia(energia: Energia)
    +compararSalud(energia: Energia)
    +compararEquipo(equipamiento: Equipamiento)
    +modificarEquipo(equipo: Equipo)
    +posicionar(posicion: Posicion)
    +{abstract}perderTurnos()
    +miPosicion(): Posicion()
    +habilitar()
    +estaHabilitado: boolean
    +deshabilitar()
    +agregarDispositivoAzar(dispositivoDeAzar: DispositivoDeAzar)
    +lanzar(): ValorAzar
}


class Tablero{
    -mapa: Mapa
    +Tablero(mapa: Mapa)
    +obtenerCasillero(posicion: Posicion): Casillero
    +calcularPosicion(valor: valorAzar): Posicion
    +posicionInicial(): Posicion
    +posicionFinal(): Posicion
    +posicionMedio(): Posicion
}


class SistemaControlGanador{
    +SistemaControlGanador(tablero: Tablero)
    +gano(jugador: Jugador, algoRoma: AlgoRoma)
}


AlgoRoma --> Tablero
AlgoRoma --> ListaCircular
AlgoRoma --> SistemaControlGanador

AlgoRoma --> Jugador
SistemaControlGanador --> Tablero

ListaCircular "1 " --> "2..6 " Jugador


@enduml