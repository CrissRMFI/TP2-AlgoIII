@startuml Jugador

abstract class Jugador{
    +afectarEnergia(energia: Energia)
    +defenderse()
    +compararSalud(energia: Energia)
    +compararEquipo(equipamiento: Equipamiento)
    +equipar(equipo: Equipo)
    +posicionar(posicion: Posicion)
    +{abstract}moverse(tablero: Tablero)
    +{abstract}finalizarTurno()
    +{abstract}perderTurnos()
    +miPosicion(): Posicion()
    +habilitar()
    +agregarDispositivoAzar(dispositivoDeAzar: DispositivoDeAzar)
    +lanzar(): ValorAzar
}

interface SistemaDefensa{
    +{abstract}recibirDanio(Energia energia)
    +{abstract}modificarEquipo(equipo: Equipo)
    +{abstract}comparar(equipamiento: Equipamiento): boolean
}

class DefensaGladiador{
    +DefensaGladiador(equipo Equipo)
    +recibirDanio(Energia energia)
    +modificarEquipo(equipo: Equipo)
    +comparar(equipamiento: Equipamiento): boolean
}

abstract class Equipo{
    -tipoEquipo: Equipamiento
    +interactuar(jugador: Jugador)
    +{abstract}energiaAReducir(): Energia
    +esEquipoSuperador(equipo: Equipo): bool
}

class Energia{
    -disponible: int
    +Energia(disponible: int)
    +afectarEnergia(energia: Energia)
    +otorgarEnergia(): int
    +tengoEnergia(): boolean
    +comparar(energia: Energia): boolean
    #cantidadeEnergia(): int
}

interface Posicion{
    +{abstract}cambiarPosicion(posicion: Posicion): Posicion
    +{abstract}obtenerCoordenada(): Coordenada
    +{abstract}esIgual(posicion: Posicion): boolean
    +{abstract}esMayorIgual(posicion: Posicion): boolean
}

interface DispositivoDeAzar{
    {abstract}+lanzar(): ValorAzar
}

class Gladiador{
    +Gladiador()
    +ascenderSeniority()
    +moverse(tablero: Tablero)
    +perderTurnos()
    +finalizarTurno()
}


interface Seniority{
    +ascenderSeniority(turno: Turno): Seniority
    +aumentarEnergia(energia: Energia)
}

class Novato{
    -energia: Energia
    +ascenderSeniority(turno: Turno): Seniority
    +aumentarEnergia(energia: Energia)
}

class SemiSenior{
    -energia: Energia
    +ascenderSeniority(turno: Turno): Seniority
    +aumentarEnergia(energia: Energia)
}

class Senior{
    -energia: Energia
    +ascenderSeniority(turno: Turno): Seniority
    +aumentarEnergia(energia: Energia)
}

class Turno{
    cantidad: int
    cantidadParaSerHabilitado: int
    +agregarTurnoJugado()
    +estaHabilitado(): bool
    +turnosJugados(): int
    +perderTurnos(cantidadAPerder: int)
}


Jugador --> SistemaDefensa
Jugador --> Energia
Jugador ---> Posicion
Jugador --> DispositivoDeAzar
Jugador --> Turno

SistemaDefensa <|-- DefensaGladiador

Jugador <|-- Gladiador

Gladiador --> Seniority

DefensaGladiador --> Equipo

Seniority <|-- Novato
Seniority <|-- SemiSenior
Seniority <|-- Senior

@enduml