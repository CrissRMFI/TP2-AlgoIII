@startuml AlgoRoma

class AlgoRoma{
    +AlgoRoma(mapa: Mapa)
    +agregarJugador(jugador: Jugador)
    +comenzarPartida()
    +jugarTurno(): Jugador
    -turnoFinalizado(jugador: Jugador)
    +elGanador(): JugadorGanador
    +getCasilleros(): LinkedList<Casillero>
}


class Mapa{
    -camino: LinkedList<Casillero>
    +Mapa(informacionMapa: InformacionMapa)
    -obtenerCasillero(posicion: int): Casillero
    +obtenerProximoDestino(casillero: Casillero, posicionAMover: int): Casillero
    +ubicarEnInicio(jugador: Jugador)
    +ubicarEnMitadDelCamino(jugador: Jugador)
    +jugadorGano(jugador: Jugador): boolean
    +getCasilleros(): LinkedList<Casillero>
}


abstract class Jugador{
    #energia: Energia
    #dispositivoDeAzar: DispositivoDeAzar
    #estado: Estado
    #nombre: String
    #casillero: Casillero
    #turno: Turno
    +Jugador(nombre: String)
    +afectarEnergia(energia: Energia)
    +lanzar(): int
    +yoSoy(): String
    +posicionar(casillero: Casillero)
    +compararPosicion(casillero: Casillero): boolean
    +setEstado(estado: Estado)
    +tengoEnergia(): boolean
    +miPosicion(): Casillero
    +{abstract} miDescripcion(): String
    +{abstract} moverse(mapa: Mapa)
}


interface JugadorGanador{
    +{abstract} yoSoy(): String
}


class SistemaTurnos{
    -turnosPorRonda: Turno
    -rondasRestantes: int
    -indiceJugadorActual: int
    +SistemaTurnos(rondas: int)
    +agregarJugador(jugador: Jugador)
    +comenzarConAleatorio(): Jugador
    +terminarTurnos()
    +terminonLosTurnos(): boolean
    +siguienteJugador(): Jugador
    +terminarTurnoJugador()
}


AlgoRoma -> Mapa
AlgoRoma -> Jugador
JugadorGanador <- AlgoRoma
AlgoRoma --> SistemaTurnos

Mapa -[hidden]> Jugador


SistemaTurnos "1 " --> "2 .. 6  " Jugador

@enduml