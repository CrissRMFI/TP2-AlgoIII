@startuml Jugador2

abstract class Jugador{
    #nombre: String
    +afectarEnergia(energia: Energia): void
    +compararSalud(energia: Energia): void
    +habilitar(): void
    +agregarDispositivoAzar(dispositivoDeAzar: DispositivoDeAzar): void
    +lanzar(): ValorAzar
    +yoSoy(): String
    +posicionar(casillero: Casillero): void
    +{abstract}moverse(): void
    +compararPosicion(casillero: Casillero): boolean
    +{abstract}finalizarTurno (algoRoma: AlgoRoma): void
    +{abstract}miDescripcion(): String
    +{abstract}obtenerElementos(): void
}

class Energia{
    -disponible: int
    +Energia(disponible: int)
    #cantidadDeEnergia(): int
    +afectarEnergia(energia: Energia)
    +tengoEnergia(): boolean
    +comparar(energia: Energia): boolean
    +descripcion(): String
}

interface DispositivoDeAzar{
    +{abstract}lanzar(): ValorAzar
}

class Turno{
    #cantidad: int
    -habilitado: int
    +Turno(cantidad: int)
    +habilitar()
    +deshabilitar()
    +estaHabilitado(): boolean
    +finalizar()
    +esMayor(turno: Turno): boolean
    +perderTurnos(turno: Turno)
}

class Casillero{
    #elementos: LinkedList<Interactuable>
    #x: int
    #y: int
    +Casillero(x: int, y: int)
    +recibirElemento(elemento: Interactuable)
    +entregarElementos(jugador: Jugador)
    +equals(casillero: Casillero): boolean
    +conseguirX(): int
    +conseguirY(): int
}



Jugador --> Energia
Jugador ---> DispositivoDeAzar
Jugador ---> Turno
Jugador --> Casillero




@enduml