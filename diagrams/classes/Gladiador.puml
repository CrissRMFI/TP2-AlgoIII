@startuml

interface Seniority {
    + Seniority ascenderSeniority()
    + void aumentarEnergia()
    + String descripcion()
}

class Novato {
     + Seniority ascenderSeniority()
     + void aumentarEnergia()
     + String descripcion()
}
class SemiSenior{
    + Seniority ascenderSeniority()
    + void aumentarEnergia()
    + String descripcion()
   }
class Senior {
     + Seniority ascenderSeniority()
     + void aumentarEnergia()
     + String descripcion()
}

Novato ..|> Seniority
SemiSenior ..|> Seniority
Senior ..|> Seniority

Gladiador ----> Seniority
Gladiador ---> Equipo
abstract class Equipo {
    + Equipo mejorar()
    + void recibirDanio (energia: Energia)
    + boolean sePuedeMejorar()
    
}
abstract class Jugador {
}
Jugador <|- Gladiador
class Gladiador {

    + Gladiador(nombre: String)
    + void ascenderSeniority()
    + void moverse()
    + void obtenerElementos()
    + void perderTurnos(turnos: Turno)
    + void finalizarTurno(algoRoma: AlgoRoma)
    + void recibirDanio(energia: Energia)
    + void defenderse()
    + void equiar()
    + boolean esEquipoMaximo()
    + String miDescripcion()

}

@enduml